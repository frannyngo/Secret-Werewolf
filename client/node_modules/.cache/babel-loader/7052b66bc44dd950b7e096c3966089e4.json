{"ast":null,"code":"var _jsxFileName = \"/Users/francistan/Desktop/secretwerewolf/client/src/components/Multiplayer.js\",\n    _s = $RefreshSig$();\n\nimport { Redirect } from \"react-router\";\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Multiplayer = ({\n  token\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    message: '',\n    username: ''\n  });\n  const [userData, setUserData] = useState();\n  const [chat, setChat] = useState([]);\n  var socket = io('http://localhost:5000', {\n    transports: ['websocket']\n  });\n\n  const Send = e => {\n    e.preventDefault();\n    console.log('STATE BEFORE RESET', state);\n    const {\n      username,\n      message\n    } = state;\n    socket.emit('chat message', {\n      username,\n      message\n    });\n    setState({\n      message: '',\n      username: username\n    });\n    setChat([...chat, {\n      username,\n      message\n    }]);\n    console.log('CHAT AFTER SEND', chat);\n    console.log('STATE AFTER RESET', state);\n  };\n\n  const RenderChat = () => {\n    // return chat.map(({username, message}, key) => {\n    //     <li key={key}>\n    //         <h3>\n    //             {username}: <span> {message} </span>\n    //         </h3>\n    //     </li>\n    // })\n    return chat.map((text, key) => {\n      /*#__PURE__*/\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [text.username, \" : \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", text.message, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 35\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  useEffect(() => {\n    socket.on('connection', ({\n      username,\n      message\n    }) => {\n      setChat([...chat, {\n        username,\n        message\n      }]);\n    }); // socket.on('connect', function () {\n    //     socket.emit('chat message', ({ username, message }) => {\n    //         socket.emit('chat message', { username, message })\n    //         setChat([...chat, { username, message }])\n    //     });\n    // });\n\n    axios.post('http://localhost:5000/accounts/me', {\n      token: token\n    }).then(response => {\n      setUserData(response.data);\n      setState({\n        username: response.data.username\n      });\n    });\n  }, []);\n\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multibody\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"messages\",\n          children: RenderChat()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: Send,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          className: \"input\",\n          type: \"text\",\n          autoComplete: \"off\",\n          id: \"\",\n          placeholder: \"What would you like to say?\",\n          value: state.message,\n          onChange: e => {\n            setState({ ...state,\n              message: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bt\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Multiplayer, \"OwBPWwvtIyYN8U+sE0ueJlckhPE=\");\n\n_c = Multiplayer;\nexport default Multiplayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Multiplayer\");","map":{"version":3,"sources":["/Users/francistan/Desktop/secretwerewolf/client/src/components/Multiplayer.js"],"names":["Redirect","io","useState","useEffect","axios","Multiplayer","token","state","setState","message","username","userData","setUserData","chat","setChat","socket","transports","Send","e","preventDefault","console","log","emit","RenderChat","map","text","key","on","post","then","response","data","target","value"],"mappings":"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","sourcesContent":["import { Redirect } from \"react-router\";\nimport { io } from 'socket.io-client'\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Multiplayer = ({ token }) => {\n    const [ state, setState ] = useState({ message: '', username: '' });\n    const [ userData, setUserData ] = useState();\n    const [ chat, setChat ] = useState([]);\n\n    var socket = io('http://localhost:5000', {transports: ['websocket']});\n\nconst Send = (e) => {\n    e.preventDefault();\n    console.log('STATE BEFORE RESET', state)\n    const { username, message } = state\n    socket.emit('chat message', { username, message })\n    setState({ message: '', username: username})\n    setChat([...chat, {username, message}])\n    console.log('CHAT AFTER SEND', chat);\n    console.log('STATE AFTER RESET', state)\n}\n\nconst RenderChat = () => {\n    // return chat.map(({username, message}, key) => {\n    //     <li key={key}>\n    //         <h3>\n    //             {username}: <span> {message} </span>\n    //         </h3>\n    //     </li>\n    // })\n\n    return chat.map((text, key) => {\n        <li key={key}>\n            <h3>\n                {text.username} : <span> {text.message} </span>\n            </h3>\n        </li>\n    })\n}\n\nuseEffect(() => {\n    \n        socket.on('connection', ({ username, message}) => {\n            setChat([...chat, { username, message }])\n        })\n\n        // socket.on('connect', function () {\n        //     socket.emit('chat message', ({ username, message }) => {\n        //         socket.emit('chat message', { username, message })\n        //         setChat([...chat, { username, message }])\n        //     });\n        // });\n\n        axios.post('http://localhost:5000/accounts/me', {\n        token: token,\n        })\n            .then(response => {\n            setUserData(response.data);\n            setState({ username: response.data.username })\n    })\n\n}, [])\n\n    if (!userData) {\n    return <p> Loading... </p>\n}\n\n    if (!token) {\n    return <Redirect to='/' />\n}\n\n    return (\n        <>\n            <div className='multibody' >\n                <div>\n                    <ul className='messages'>\n                        {RenderChat()}\n                    </ul>\n\n                </div>\n\n                <form className='form' onSubmit={Send}>\n\n                <input required\n                    className='input'  \n                    type='text'\n                    autoComplete='off'\n                    id=''\n                    placeholder='What would you like to say?'\n                    value={state.message}\n                    onChange={e => { setState({...state, message: e.target.value})}}\n                    >\n                </input>\n                <button className='bt'>\n                    Send\n                </button>\n                </form>\n            </div>\n        </>\n    );\n}\n\nexport default Multiplayer;"]},"metadata":{},"sourceType":"module"}