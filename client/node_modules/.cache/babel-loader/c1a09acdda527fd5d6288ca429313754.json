{"ast":null,"code":"var _jsxFileName = \"/Users/francistan/Desktop/secretwerewolf/client/src/components/Multiplayer.js\",\n    _s = $RefreshSig$();\n\nimport { Redirect } from \"react-router\";\nimport { io } from 'socket.io-client';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { text } from \"body-parser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Multiplayer = ({\n  token\n}) => {\n  _s();\n\n  // const [ state, setState ] = useState({ message: '', username: '' });\n  const [message, setMessage] = useState('');\n  const [user, setUser] = useState('');\n  const [userData, setUserData] = useState();\n  const [chat, setChat] = useState([]);\n  var socket = io('http://localhost:5000', {\n    transports: ['websocket']\n  });\n\n  const Send = e => {\n    e.preventDefault();\n    socket.emit('chat message', {\n      user,\n      message\n    });\n    setMessage('');\n    setUser(user);\n    setChat([...chat, {\n      user,\n      message\n    }]);\n    console.log('CHAT AFTER SEND', chat);\n  };\n\n  const RenderChat = () => {\n    return chat.map((chatty, key) => {\n      /*#__PURE__*/\n      _jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [chatty.username, \": \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\" \", chatty.message, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  useEffect(() => {\n    socket.on('connection', ({\n      username,\n      message\n    }) => {\n      setChat([...chat, {\n        username,\n        message\n      }]);\n    }); // socket.on('connect', function () {\n    //     socket.emit('chat message', ({ username, message }) => {\n    //         socket.emit('chat message', { username, message })\n    //         setChat([...chat, { username, message }])\n    //     });\n    // });\n\n    axios.post('http://localhost:5000/accounts/me', {\n      token: token\n    }).then(response => {\n      setUserData(response.data);\n      setUser(response.data.username);\n    });\n  }, []);\n\n  if (!userData) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multibody\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \" HELLOOOO?? \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), RenderChat()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: Send,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          className: \"input\",\n          type: \"text\",\n          autoComplete: \"off\",\n          id: \"\",\n          placeholder: \"What would you like to say?\",\n          value: message,\n          onChange: e => {\n            setMessage([...message, e.target.value]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"bt\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Multiplayer, \"tYUdBrBXj5eRUOgUxG6DYdyXfhw=\");\n\n_c = Multiplayer;\nexport default Multiplayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Multiplayer\");","map":{"version":3,"sources":["/Users/francistan/Desktop/secretwerewolf/client/src/components/Multiplayer.js"],"names":["Redirect","io","useState","useEffect","axios","text","Multiplayer","token","message","setMessage","user","setUser","userData","setUserData","chat","setChat","socket","transports","Send","e","preventDefault","emit","console","log","RenderChat","map","chatty","key","username","on","post","then","response","data","target","value"],"mappings":"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","sourcesContent":["import { Redirect } from \"react-router\";\nimport { io } from 'socket.io-client'\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { text } from \"body-parser\";\n\nconst Multiplayer = ({ token }) => {\n    // const [ state, setState ] = useState({ message: '', username: '' });\n    const [ message, setMessage ] = useState('');\n    const [ user, setUser ] = useState('');\n    const [ userData, setUserData ] = useState();\n    const [ chat, setChat ] = useState([]);\n\n    var socket = io('http://localhost:5000', {transports: ['websocket']});\n\nconst Send = (e) => {\n    e.preventDefault();\n    socket.emit('chat message', { user, message })\n    setMessage('');\n    setUser(user)\n    setChat([...chat, {user, message}])\n    console.log('CHAT AFTER SEND', chat);\n}\n\nconst RenderChat = () => {\n    return chat.map((chatty, key) => {\n        <li key={key}>\n            <h3>\n                {chatty.username}: <span> {chatty.message} </span>\n            </h3>\n        </li>\n    })\n}\n\nuseEffect(() => {\n    \n        socket.on('connection', ({ username, message}) => {\n            setChat([...chat, { username, message }])\n        })\n\n        // socket.on('connect', function () {\n        //     socket.emit('chat message', ({ username, message }) => {\n        //         socket.emit('chat message', { username, message })\n        //         setChat([...chat, { username, message }])\n        //     });\n        // });\n\n        axios.post('http://localhost:5000/accounts/me', {\n        token: token,\n        })\n            .then(response => {\n            setUserData(response.data);\n            setUser(response.data.username )\n    })\n\n}, [])\n\n    if (!userData) {\n    return <p> Loading... </p>\n}\n\n    if (!token) {\n    return <Redirect to='/' />\n}\n\n    return (\n        <>\n            <div className='multibody' >\n                <div>\n                    <h1> HELLOOOO?? </h1>\n                        {/* {chat.map(msg => {\n                            <li>\n                                <h3>\n                                    {msg.username} <span> {msg.message} </span>\n                                </h3>\n                            </li>\n                        })} */}\n                        {RenderChat()}\n                </div>\n\n                <form className='form' onSubmit={Send}>\n\n                <input required\n                    className='input'  \n                    type='text'\n                    autoComplete='off'\n                    id=''\n                    placeholder='What would you like to say?'\n                    value={message}\n                    onChange={e => {setMessage([...message, e.target.value])}}\n                    >\n                </input>\n                <button className='bt'>\n                    Send\n                </button>\n                </form>\n            </div>\n        </>\n    );\n}\n\nexport default Multiplayer;"]},"metadata":{},"sourceType":"module"}